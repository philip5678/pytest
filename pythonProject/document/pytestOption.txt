在terminal里的命令行运行参数设置（在pytest.ini文件中类似）：

pytest ../test_dir/test3.py  测试的文件路径，可以到具体的文件，也可以是目录，即它整个目录下的所有文件 需要包：pytest
-vs -s显示调试信息和-v显示详细路径，
-n=auto 选择线程数 需要包：pytest-xdist
--reruns=2 错误要重运行的次数 需要包：pytest-rerunfailures
--html=../report/report.html 包pytest-html产生的报告存放位置
--alluredir=../report/allure 包allure-pytest产生的报告存放位置
--cov=../test_dir  --cov-report=html 包pytest-cov设置，先是测试文件的目录，后是报告文件类型，存放在当前目录下
-x 表示有一个出错就停止测试
--maxfail=2 出现两个错才停止
-k="usr"  只测试用例名中有usr的用例
-m="smoke or usermanagement" 分组(冒烟、模块、接口、web等测试)执行：标志要执行的文件 可以用or 或 and 联结，在ini文件与py文件中都要先marker和mark

@pytest.mark的用法：
@pytest.mark.xxx  分组(冒烟、模块、接口、web等测试)执行：标志要执行的文件 可以用or 或 and 联结，在ini文件与py文件中都要先marker和mark
@pytest.mark.run(order=X)
@pytest.mark.skipif()
@pytest.mark.skip()
@pytest.mark.parametrize()  #注意与@pytest.fixture中的参数区别，一个是fixture，一个是测试用例
@pytest.mark.xfail(sys.version_info >= (3, 6), reason="python3.6 api changes")


https://www.cnblogs.com/Neeo/articles/11832655.html
setup和teardown#
我们知道，在unittest中，setup和teardown可以在每个用例前后执行，也可以在所有的用例集执行前后执行。那么在pytest中，有以下几种情况：
模块级别，也就是在整个测试脚本文件中的用例集开始前后，对应的是：
setup_module
teardown_module
类级别，在类中的所有用例集执行前后，对应的是：
setup_class
teardown_class
在类中呢，也可以在进一步划分，在每一个方法执行前后，对应：
setup_method
teardown_method
函数级别，在用例函数之前后，对应：
setup_function
teardown_function

@pytest.fixture(scope="function", params=[' - 中国队', ' - 加拿大队', ' - 美国队'], ids=["China", "Canada", "USA"],
                name="fixture_alias")